#Leetcode 1011:
def canShip(capacity):
            current_weight = 0
            required_days = 1            
            for weight in weights:
                if current_weight + weight > capacity:
                    required_days += 1
                    current_weight = 0  
                
                current_weight += weight
            
            return required_days <= days

        left, right = max(weights), sum(weights)
        
        while left < right:
            mid = (left + right) // 2
            if canShip(mid):
                right = mid  
            else:
                left = mid + 1 
        
        return left
    
#leetcode:
matrix=[[1,3,5,7],[10,11,16,20],[23,30,34,60]]
key=34
m=len(matrix)
n=len(matrix[0])
low=0
high=(n*m)-1
while low<=high:
    mid=(low+high)//2
    i=(mid//m)
    j=(mid%m)
    res=matrix[i][j]
    if res==key:
        print(f"Element present in the index {i,j}")
        break
    if res>mid:
        low=mid+1
    if res<mid:
        high=mid-1
